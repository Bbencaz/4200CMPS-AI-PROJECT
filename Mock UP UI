import { useState } from "react";
import { UserInput } from "./components/UserInput";
import { ToneCustomization } from "./components/ToneCustomization";
import { PreviewMockups } from "./components/PreviewMockups";
import { FinalActions } from "./components/FinalActions";
import { Button } from "./components/ui/button";
import { Progress } from "./components/ui/progress";
import { ArrowLeft } from "lucide-react";

type Step = "input" | "customize" | "preview" | "finalize";

interface Draft {
  id: string;
  content: string;
  tone: string;
  platform: string;
  engagement_score: number;
  hashtags: string[];
  suggestedHashtags: string[];
}

interface InputData {
  type: string;
  content: string;
  additionalData?: any;
}

export default function App() {
  const [currentStep, setCurrentStep] = useState<Step>("input");
  const [inputData, setInputData] = useState<InputData | null>(null);
  const [selectedDraft, setSelectedDraft] = useState<Draft | null>(null);
  const [customizedDraft, setCustomizedDraft] = useState<Draft | null>(null);
  const [finalizedDraft, setFinalizedDraft] = useState<Draft | null>(null);

  const steps: Step[] = ["input", "customize", "preview", "finalize"];
  const stepNames = {
    input: "Create",
    customize: "Customize",
    preview: "Preview",
    finalize: "Publish"
  };

  const getCurrentStepIndex = () => steps.indexOf(currentStep);
  const getProgressPercentage = () => (getCurrentStepIndex() / (steps.length - 1)) * 100;

  const handleGenerate = (input: InputData) => {
    setInputData(input);
    // Create a default draft from the input data
    const defaultDraft: Draft = {
      id: "1",
      content: input.content,
      tone: "professional",
      platform: "all",
      engagement_score: 0,
      hashtags: [],
      suggestedHashtags: []
    };
    setSelectedDraft(defaultDraft);
    setCurrentStep("customize");
  };

  const handleCustomize = (draft: Draft) => {
    setCustomizedDraft(draft);
    setCurrentStep("preview");
  };

  const handleFinalize = (draft: Draft) => {
    setFinalizedDraft(draft);
    setCurrentStep("finalize");
  };

  const handleStartNew = () => {
    setCurrentStep("input");
    setInputData(null);
    setSelectedDraft(null);
    setCustomizedDraft(null);
    setFinalizedDraft(null);
  };

  const handleBack = () => {
    const currentIndex = getCurrentStepIndex();
    if (currentIndex > 0) {
      setCurrentStep(steps[currentIndex - 1]);
    }
  };

  const canGoBack = getCurrentStepIndex() > 0;

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Header with progress */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4">
              {canGoBack && (
                <Button variant="outline" size="sm" onClick={handleBack}>
                  <ArrowLeft className="h-4 w-4" />
                </Button>
              )}
              <div>
                <h1 className="text-lg">MarketAI</h1>
                <p className="text-sm text-muted-foreground">
                  Step {getCurrentStepIndex() + 1} of {steps.length}: {stepNames[currentStep]}
                </p>
              </div>
            </div>
            <Button variant="ghost" size="sm" onClick={handleStartNew}>
              Create New Post
            </Button>
          </div>
          <Progress value={getProgressPercentage()} className="w-full" />
        </div>

        {/* Main content */}
        <div className="max-w-6xl mx-auto">
          {currentStep === "input" && (
            <UserInput onGenerate={handleGenerate} />
          )}

          {currentStep === "customize" && selectedDraft && (
            <ToneCustomization 
              selectedDraft={selectedDraft} 
              onCustomize={handleCustomize} 
            />
          )}
